// vite.config.ts
import { defineConfig } from "file:///C:/Users/justin/Documents/Dev/Hyper-Brew/bolt-express/node_modules/vite/dist/node/index.js";
import { svelte } from "file:///C:/Users/justin/Documents/Dev/Hyper-Brew/bolt-express/node_modules/@sveltejs/vite-plugin-svelte/src/index.js";
import sveltePreprocess from "file:///C:/Users/justin/Documents/Dev/Hyper-Brew/bolt-express/node_modules/svelte-preprocess/dist/index.js";
import {
  expressPlugin,
  expressPluginInit,
  runAction
} from "file:///C:/Users/justin/Documents/Dev/Hyper-Brew/bolt-express/vite-express-plugin/lib/index.js";

// package.json
var version = "0.0.0";

// express.config.ts
var manifest = {
  testId: "63ca98b1-9551-4eb7-aa4f-dc494c79f23d",
  name: "Gradients",
  version: "1.0.3",
  manifestVersion: 2,
  requirements: {
    apps: [
      {
        name: "Express",
        apiVersion: 1
      }
    ]
  },
  entryPoints: [
    {
      type: "panel",
      id: "panel1",
      main: "index.html",
      documentSandbox: "code.js"
    }
  ]
};
var extraPrefs = {
  copyZipAssets: ["public-zip/*"]
};
var config = {
  manifest,
  version,
  ...extraPrefs
};

// vite.config.ts
var action = process.env.ACTION;
var mode = process.env.MODE;
console.log("ACTION", action);
console.log("MODE", mode);
if (action)
  runAction(
    {},
    // config,
    action
  );
expressPluginInit();
var vite_config_default = defineConfig({
  plugins: [
    svelte({ preprocess: sveltePreprocess({ typescript: true }) }),
    // BOLT_SVELTE_ONLY
    expressPlugin(config, mode)
  ],
  base: "./",
  build: {
    outDir: "dist"
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIiwgImV4cHJlc3MuY29uZmlnLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcanVzdGluXFxcXERvY3VtZW50c1xcXFxEZXZcXFxcSHlwZXItQnJld1xcXFxib2x0LWV4cHJlc3NcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXGp1c3RpblxcXFxEb2N1bWVudHNcXFxcRGV2XFxcXEh5cGVyLUJyZXdcXFxcYm9sdC1leHByZXNzXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9qdXN0aW4vRG9jdW1lbnRzL0Rldi9IeXBlci1CcmV3L2JvbHQtZXhwcmVzcy92aXRlLmNvbmZpZy50c1wiO2ltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XG5pbXBvcnQgeyBzdmVsdGUgfSBmcm9tIFwiQHN2ZWx0ZWpzL3ZpdGUtcGx1Z2luLXN2ZWx0ZVwiOyAvLyBCT0xUX1NWRUxURV9PTkxZXG5pbXBvcnQgc3ZlbHRlUHJlcHJvY2VzcyBmcm9tIFwic3ZlbHRlLXByZXByb2Nlc3NcIjsgLy8gQk9MVF9TVkVMVEVfT05MWVxuaW1wb3J0IHtcbiAgZXhwcmVzc1BsdWdpbixcbiAgZXhwcmVzc1BsdWdpbkluaXQsXG4gIHJ1bkFjdGlvbixcbn0gZnJvbSBcInZpdGUtZXhwcmVzcy1wbHVnaW5cIjtcblxuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIi4vZXhwcmVzcy5jb25maWdcIjtcblxuY29uc3QgYWN0aW9uID0gcHJvY2Vzcy5lbnYuQUNUSU9OO1xuY29uc3QgbW9kZSA9IHByb2Nlc3MuZW52Lk1PREU7XG5jb25zb2xlLmxvZyhcIkFDVElPTlwiLCBhY3Rpb24pO1xuY29uc29sZS5sb2coXCJNT0RFXCIsIG1vZGUpO1xuXG5pZiAoYWN0aW9uKVxuICBydW5BY3Rpb24oXG4gICAge30sXG4gICAgLy8gY29uZmlnLFxuICAgIGFjdGlvblxuICApO1xuXG5leHByZXNzUGx1Z2luSW5pdCgpO1xuXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcbiAgcGx1Z2luczogW1xuICAgIHN2ZWx0ZSh7IHByZXByb2Nlc3M6IHN2ZWx0ZVByZXByb2Nlc3MoeyB0eXBlc2NyaXB0OiB0cnVlIH0pIH0pLCAvLyBCT0xUX1NWRUxURV9PTkxZXG4gICAgZXhwcmVzc1BsdWdpbihjb25maWcsIG1vZGUpLFxuICBdLFxuICBiYXNlOiBcIi4vXCIsXG4gIGJ1aWxkOiB7XG4gICAgb3V0RGlyOiBcImRpc3RcIixcbiAgfSxcbn0pO1xuIiwgIntcbiAgXCJuYW1lXCI6IFwiYm9sdC1leHByZXNzXCIsXG4gIFwicHJpdmF0ZVwiOiB0cnVlLFxuICBcInZlcnNpb25cIjogXCIwLjAuMFwiLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImRldlwiOiBcInZpdGUgLS1tb2RlIGRldlwiLFxuICAgIFwiZGV2Y29kZVwiOiBcInZpdGUgYnVpbGQgLS13YXRjaCAtLW1vZGUgZGV2IC0tY29uZmlnIHZpdGUuY29uZmlnLmNvZGUudHNcIixcbiAgICBcImRldnZcIjogXCJ5YXJuIGNjd2ViLWFkZC1vbi1zY3JpcHRzIHN0YXJ0IC0tdXNlIFxcXCJ2aXRlIGJ1aWxkXFxcIiAtLXNyYz1kdW1teVwiLFxuICAgIFwiZGV2dnZcIjogXCJ5YXJuIGNjd2ViLWFkZC1vbi1zY3JpcHRzIHN0YXJ0IC0tdXNlIFxcXCJ2aXRlIGJ1aWxkXFxcIiAtLXNyYz1kdW1teVwiLFxuICAgIFwiYnVpbGRcIjogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgXCJidWlsZGNvZGVcIjogXCJ2aXRlIGJ1aWxkIC0tY29uZmlnIHZpdGUuY29uZmlnLmNvZGUudHNcIixcbiAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIixcbiAgICBcInNlcnZlXCI6IFwic2VydmUgLWMgLi9zZXJ2ZS5qc29uIC0tc3NsLWNlcnQgXFxcIi4vc3NsL2NlcnQucGVtXFxcIiAtLXNzbC1rZXkgXFxcIi4vc3NsL2tleS5wZW1cXFwiXCIsXG4gICAgXCJjaGVja1wiOiBcInN2ZWx0ZS1jaGVjayAtLXRzY29uZmlnIC4vdHNjb25maWcuanNvbiAmJiB0c2MgLXAgdHNjb25maWcubm9kZS5qc29uXCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGFkb2JlL2Njd2ViLWFkZC1vbi1zY3JpcHRzXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJAYWRvYmUvY2N3ZWItYWRkLW9uLXNkay10eXBlc1wiOiBcIl4xLjMuMFwiLFxuICAgIFwiQHN2ZWx0ZWpzL3ZpdGUtcGx1Z2luLXN2ZWx0ZVwiOiBcIl4zLjEuMVwiLFxuICAgIFwiQHRzY29uZmlnL3N2ZWx0ZVwiOiBcIl41LjAuNFwiLFxuICAgIFwiY29yc1wiOiBcIl4yLjguNVwiLFxuICAgIFwiZXhwcmVzc1wiOiBcIl40LjIxLjBcIixcbiAgICBcInNlcnZlXCI6IFwiXjE0LjIuM1wiLFxuICAgIFwic3ZlbHRlXCI6IFwiXjQuMi4xOFwiLFxuICAgIFwic3ZlbHRlLWNoZWNrXCI6IFwiXjMuOC41XCIsXG4gICAgXCJ0c2xpYlwiOiBcIl4yLjYuM1wiLFxuICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjUuM1wiLFxuICAgIFwidml0ZVwiOiBcIl41LjQuMVwiLFxuICAgIFwidml0ZS1leHByZXNzLXBsdWdpblwiOiBcIl4wLjAuMVwiXG4gIH1cbn1cbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcanVzdGluXFxcXERvY3VtZW50c1xcXFxEZXZcXFxcSHlwZXItQnJld1xcXFxib2x0LWV4cHJlc3NcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXGp1c3RpblxcXFxEb2N1bWVudHNcXFxcRGV2XFxcXEh5cGVyLUJyZXdcXFxcYm9sdC1leHByZXNzXFxcXGV4cHJlc3MuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9qdXN0aW4vRG9jdW1lbnRzL0Rldi9IeXBlci1CcmV3L2JvbHQtZXhwcmVzcy9leHByZXNzLmNvbmZpZy50c1wiO2ltcG9ydCB0eXBlIHtcclxuICBFeHByZXNzQ29uZmlnLFxyXG4gIFBsdWdpbk1hbmlmZXN0LFxyXG59IGZyb20gXCJ2aXRlLWV4cHJlc3MtcGx1Z2luL2xpYi90eXBlc1wiO1xyXG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vcGFja2FnZS5qc29uXCI7XHJcblxyXG5leHBvcnQgY29uc3QgbWFuaWZlc3Q6IFBsdWdpbk1hbmlmZXN0ID0ge1xyXG4gIHRlc3RJZDogXCI2M2NhOThiMS05NTUxLTRlYjctYWE0Zi1kYzQ5NGM3OWYyM2RcIixcclxuICBuYW1lOiBcIkdyYWRpZW50c1wiLFxyXG4gIHZlcnNpb246IFwiMS4wLjNcIixcclxuICBtYW5pZmVzdFZlcnNpb246IDIsXHJcbiAgcmVxdWlyZW1lbnRzOiB7XHJcbiAgICBhcHBzOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiBcIkV4cHJlc3NcIixcclxuICAgICAgICBhcGlWZXJzaW9uOiAxLFxyXG4gICAgICB9LFxyXG4gICAgXSxcclxuICB9LFxyXG4gIGVudHJ5UG9pbnRzOiBbXHJcbiAgICB7XHJcbiAgICAgIHR5cGU6IFwicGFuZWxcIixcclxuICAgICAgaWQ6IFwicGFuZWwxXCIsXHJcbiAgICAgIG1haW46IFwiaW5kZXguaHRtbFwiLFxyXG4gICAgICBkb2N1bWVudFNhbmRib3g6IFwiY29kZS5qc1wiLFxyXG4gICAgfSxcclxuICBdLFxyXG59O1xyXG5cclxuY29uc3QgZXh0cmFQcmVmcyA9IHtcclxuICBjb3B5WmlwQXNzZXRzOiBbXCJwdWJsaWMtemlwLypcIl0sXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29uZmlnOiBFeHByZXNzQ29uZmlnID0ge1xyXG4gIG1hbmlmZXN0LFxyXG4gIHZlcnNpb24sXHJcbiAgLi4uZXh0cmFQcmVmcyxcclxufTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUErVixTQUFTLG9CQUFvQjtBQUM1WCxTQUFTLGNBQWM7QUFDdkIsT0FBTyxzQkFBc0I7QUFDN0I7QUFBQSxFQUNFO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxPQUNLOzs7QUNKTCxjQUFXOzs7QUNHTixJQUFNLFdBQTJCO0FBQUEsRUFDdEMsUUFBUTtBQUFBLEVBQ1IsTUFBTTtBQUFBLEVBQ04sU0FBUztBQUFBLEVBQ1QsaUJBQWlCO0FBQUEsRUFDakIsY0FBYztBQUFBLElBQ1osTUFBTTtBQUFBLE1BQ0o7QUFBQSxRQUNFLE1BQU07QUFBQSxRQUNOLFlBQVk7QUFBQSxNQUNkO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxFQUNBLGFBQWE7QUFBQSxJQUNYO0FBQUEsTUFDRSxNQUFNO0FBQUEsTUFDTixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixpQkFBaUI7QUFBQSxJQUNuQjtBQUFBLEVBQ0Y7QUFDRjtBQUVBLElBQU0sYUFBYTtBQUFBLEVBQ2pCLGVBQWUsQ0FBQyxjQUFjO0FBQ2hDO0FBRU8sSUFBTSxTQUF3QjtBQUFBLEVBQ25DO0FBQUEsRUFDQTtBQUFBLEVBQ0EsR0FBRztBQUNMOzs7QUYxQkEsSUFBTSxTQUFTLFFBQVEsSUFBSTtBQUMzQixJQUFNLE9BQU8sUUFBUSxJQUFJO0FBQ3pCLFFBQVEsSUFBSSxVQUFVLE1BQU07QUFDNUIsUUFBUSxJQUFJLFFBQVEsSUFBSTtBQUV4QixJQUFJO0FBQ0Y7QUFBQSxJQUNFLENBQUM7QUFBQTtBQUFBLElBRUQ7QUFBQSxFQUNGO0FBRUYsa0JBQWtCO0FBR2xCLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVM7QUFBQSxJQUNQLE9BQU8sRUFBRSxZQUFZLGlCQUFpQixFQUFFLFlBQVksS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUFBO0FBQUEsSUFDN0QsY0FBYyxRQUFRLElBQUk7QUFBQSxFQUM1QjtBQUFBLEVBQ0EsTUFBTTtBQUFBLEVBQ04sT0FBTztBQUFBLElBQ0wsUUFBUTtBQUFBLEVBQ1Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
